name: Backend Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:push

      - name: Run linting
        run: npm run lint || echo "‚ö†Ô∏è Lint warnings ignored for testing"

      - name: Check code formatting
        run: npm run format:check || echo "‚ö†Ô∏è Format warnings ignored for testing"

      - name: Security audit
        run: npm audit --audit-level=high || echo "‚ö†Ô∏è Audit warnings ignored"

  deploy-production:
    needs: quality-checks
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r src deploy/
          cp -r prisma deploy/
          cp -r scripts deploy/
          cp -r public deploy/
          cp package*.json deploy/
          cp .env.example deploy/.env || echo "No .env.example found"

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_USER }}
          password: ${{ secrets.BACKEND_PASS }}
          port: 22
          source: './deploy/*'
          target: '/tmp/backend-deploy/'
          strip_components: 1
          overwrite: true

      - name: Install and restart backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_USER }}
          password: ${{ secrets.BACKEND_PASS }}
          port: 22
          script: |
            # Deploy new version
            rm -rf /var/www/eximex-backend/* 2>/dev/null || true
            mkdir -p /var/www/eximex-backend
            cp -r /tmp/backend-deploy/* /var/www/eximex-backend/
            
            # Install dependencies
            cd /var/www/eximex-backend
            npm install --only=production
            
            # Setup environment
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "NODE_ENV=production" >> .env
            echo "PORT=8000" >> .env
            
            # Generate Prisma client and run migrations
            npm run db:generate
            npm run db:push
            
            # Restart with PM2
            pm2 restart eximex-backend || pm2 start src/index.js --name eximex-backend
            pm2 save
            
            # Cleanup
            rm -rf /tmp/backend-deploy

      - name: Health Check
        run: |
          sleep 30
          for i in {1..5}; do
            if curl -f ${{ secrets.BACKEND_URL }}/api/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed"
              break
            fi
            echo "‚è≥ Health check attempt $i failed, retrying..."
            sleep 15
          done

      - name: Send email on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          from: ${{ secrets.SMTP_FROM }}
          to: jaydeep.flexa@gmail.com
          subject: '‚ùå Backend Deployment Failed'
          body: 'Backend production deployment failed. Check GitHub Actions logs for details.'

      - name: Send email on success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          from: ${{ secrets.SMTP_FROM }}
          to: jaydeep.flexa@gmail.com
          subject: '‚úÖ Backend Deployment Successful'
          body: 'Backend production deployment completed successfully! üéâ'